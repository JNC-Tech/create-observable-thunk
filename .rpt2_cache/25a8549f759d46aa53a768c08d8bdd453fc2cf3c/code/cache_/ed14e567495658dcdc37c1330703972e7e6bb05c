{"code":"import { Observable } from \"rxjs/Observable\";\r\nimport \"rxjs/add/observable/of\";\r\nimport \"rxjs/add/operator/do\";\r\nimport \"rxjs/add/operator/catch\";\r\nimport \"rxjs/add/operator/share\";\r\nexport function createObservableThunk(options) {\r\n    const { method, before, success, failure } = options;\r\n    const beforeActions = ensureArray(before);\r\n    const successActions = ensureArray(success);\r\n    const failureActions = ensureArray(failure);\r\n    return function thunkCreator(input) {\r\n        return function thunk(dispatch, getState) {\r\n            dispatchMany(beforeActions, input);\r\n            let o = method(input)\r\n                .do(response => dispatchMany(successActions, response))\r\n                .catch(error => dispatchMany(failureActions, error) || Observable.of({ error }))\r\n                .share();\r\n            o.subscribe();\r\n            return o;\r\n            function dispatchMany(actionCreators, payload) {\r\n                let date = new Date();\r\n                actionCreators.forEach(callback => {\r\n                    let action = callback(payload, date);\r\n                    if (action) {\r\n                        dispatch(action);\r\n                    }\r\n                    else {\r\n                        console.error(`Invalid Action Creator ${callback.name} returned undefined`);\r\n                    }\r\n                });\r\n            }\r\n        };\r\n    };\r\n}\r\nfunction ensureArray(callbacks) {\r\n    if (Array.isArray(callbacks)) {\r\n        return callbacks;\r\n    }\r\n    if (callbacks) {\r\n        return [callbacks];\r\n    }\r\n    return [];\r\n}\r\n","map":{"mappings":""},"dts":{"name":"/Users/nolan/Code/forestry/create-observable-thunk/index.d.ts","text":"import { Observable } from \"rxjs/Observable\";\r\nimport \"rxjs/add/observable/of\";\r\nimport \"rxjs/add/operator/do\";\r\nimport \"rxjs/add/operator/catch\";\r\nimport \"rxjs/add/operator/share\";\r\n/**\r\n *\r\n */\r\nexport interface ActionCreator<Input> {\r\n    (): any;\r\n    (arg: Input): any;\r\n    (arg: Input, date: Date): any;\r\n}\r\nexport declare type ActionCreators<Input> = ActionCreator<Input> | ActionCreator<Input>[] | Function | Function[];\r\nexport interface Options<Input, Response> {\r\n    /**\r\n     * An Observable returning function\r\n     */\r\n    method(input: Input): Observable<Response>;\r\n    /**\r\n     * OPTIONAL: An ActionCreator or list of ActionCreators to be dispatched before the Observable is created.\r\n     */\r\n    before?: ActionCreators<Input>;\r\n    /**\r\n     * OPTIONAL: An ActionCreator or list of ActionCreators to be dispatched if the Observable succeeds.\r\n     *\r\n     */\r\n    success?: ActionCreators<Response>;\r\n    /**\r\n     * OPTIONAL: An ActionCreator or list of ActionCreators to be dispatched if the Observable fails.\r\n     */\r\n    failure?: ActionCreators<any>;\r\n}\r\nexport declare function createObservableThunk<I = any, R = any>(options: Options<I, R>): (input: I) => (dispatch: any, getState: () => any) => Observable<R | {\r\n    error: any;\r\n}>;\r\n"}}
